---
- name: Check OS type
  ansible.builtin.command: cat /etc/os-release
  register: os_release
  changed_when: false

- name: Warn if OS is not Ubuntu
  ansible.builtin.debug:
    msg: "Warning: This role is tested only on Ubuntu. Your OS may not be fully supported."
  when: "'ubuntu' not in os_release.stdout | lower"

- name: Hostname set
  ansible.builtin.hostname:
    name: "{{ blackfort_besu_node }}"

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "0755"
    state: directory
  loop:
    - "{{ blackfort_besu_config_dir }}"
    - "{{ blackfort_besu_data_dir }}"
    - "{{ blackfort_besu_keys_dir }}"

- name: Get IP address to bind to if not provided
  include_tasks: "network.yml"
  when: not blackfort_besu_p2p_host

- name: Copy config.toml files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ blackfort_besu_config_dir }}/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  loop:
    - config.toml
  notify: Restart Docker Compose

- name: Copy genesis.json
  ansible.builtin.copy:
    src: "genesis-{{ blackfort_besu_network }}.json"
    dest: "{{ blackfort_besu_config_dir }}/genesis.json"
    owner: root
    group: root
    mode: '0644'

- name: Copy encrypted publicKey.pem
  ansible.builtin.copy:
    src: "publicKey-{{ blackfort_besu_network }}.pem"
    dest: "{{ blackfort_besu_keys_dir }}/publicKey.pem"
    owner: root
    group: root
    mode: '0644'
  when:
    - blackfort_besu_rpc_http_authentication_enabled == "true"
  notify: Restart Docker Compose

- name: Copy blocks
  ansible.builtin.copy:
    src: "exportblock-{{ blackfort_besu_network }}.bin"
    dest: "{{ blackfort_besu_config_dir }}/exportblock.bin"
    owner: root
    group: root
    mode: '0644'
  when: blackfort_besu_blocks_import == "true"

- name: Besu blocks import
  community.docker.docker_container:
    name: "besu-import"
    image: "{{ blackfort_besu_image }}:{{ blackfort_besu_version }}"
    detach: false
    auto_remove: true
#     tty: true
    command: >
      --genesis-file=/tmp/besu/config/genesis.json --data-path=/data blocks import --skip-pow-validation-enabled --from=/tmp/besu/config/exportblock.bin --start-block=0
    volumes:
      - "{{ blackfort_besu_base_dir }}:/tmp/besu"
      - "{{ blackfort_besu_data_dir }}:/data"
  when: blackfort_besu_blocks_import == "true"

- name: Find matching validator keys
  ansible.builtin.set_fact:
    validator_keypair: "{{ key_validators | selectattr('name', 'equalto', inventory_hostname) | first }}"
  when:
    - inventory_hostname in groups["validators"]
    - blackfort_besu_add_new_node == "false"

- name: Deploy nodekey
  ansible.builtin.copy:
    content: "{{ validator_keypair.nodekey }}"
    dest: "/opt/besu/keys/nodekey"
    mode: '0644'
  when:
    - inventory_hostname in groups["validators"]
    - validator_keypair.nodekey is defined
    - blackfort_besu_add_new_node == "false"

- name: Deploy nodekey.pub
  ansible.builtin.copy:
    content: "{{ validator_keypair.nodekey_pub }}"
    dest: "/opt/besu/keys/nodekey.pub"
    mode: '0644'
  when:
    - inventory_hostname in groups["validators"]
    - validator_keypair.nodekey_pub is defined
    - blackfort_besu_add_new_node == "false"

- name: Ensure nodekey and nodekey.pub exist, generate if missing
  block:
    - name: Check if nodekey and nodekey.pub exist
      ansible.builtin.stat:
        path: "{{ blackfort_besu_keys_dir }}/{{ item }}"
      loop:
        - nodekey
        - nodekey.pub
      register: keys_exist

    - name: Generate node keys if missing
      community.docker.docker_container:
        name: "besu-generate"
        image: "{{ blackfort_besu_keygen_image }}"
        auto_remove: true
        restart_policy: "no"
        command: >
          sh -c "
          quorum-genesis-tool
          generate-node-keys
          --noOutputTimestamp
          --consensus qbft
          --validators 0
          --members 1
          --bootnodes 0
          --outputPath /opt/besu/keys
          && cp /opt/besu/keys/member0/nodekey /keys/nodekey
          && cp /opt/besu/keys/member0/nodekey.pub /keys/nodekey.pub
          "
        volumes:
          - "{{ blackfort_besu_keys_dir }}:/keys"
      when: not keys_exist.results | selectattr('stat.exists', 'equalto', True) | list | length == 2
      register: generate_container

    - name: Wait for nodekey and nodekey.pub to be created
      ansible.builtin.wait_for:
        path: "{{ blackfort_besu_keys_dir }}/nodekey.pub"
        delay: 3
        timeout: 15
      when: generate_container.changed

- name: Read nodekey.pub
  ansible.builtin.slurp:
    src: "{{ blackfort_besu_keys_dir }}/nodekey.pub"
  register: nodekey_pub
  when: blackfort_besu_add_new_node == "false"

- name: Set enode_uri based on blackfort_besu_hostname
  ansible.builtin.set_fact:
    enode_uri: >-
      {{
        'enode://' + (nodekey_pub.content | b64decode) + '@' +
        (
          'besu-node-' + inventory_hostname + '.' + blackfort_besu_network + '.' + blackfort_besu_hostname
          if blackfort_besu_hostname and blackfort_besu_hostname != ""
          else ansible_host
        ) + ':' + (blackfort_besu_p2p_port | string) + '?discport=0'
      }}
  when: blackfort_besu_add_new_node == "false"

- name: Gather enode URIs from all nodes
  ansible.builtin.set_fact:
    enode_uris_collected: "{{ hostvars | dict2items | selectattr('key', 'in', ansible_play_hosts) | map(attribute='value.enode_uri') | list }}"
  run_once: true
  when: blackfort_besu_add_new_node == "false"

- name: Ensure static-nodes.json exists or load from template
  block:
    - name: Check if static-nodes.json exists
      ansible.builtin.stat:
        path: "{{ blackfort_besu_config_dir }}/static-nodes.json"
      register: static_nodes_json
      delegate_to: "{{ ansible_play_hosts | first }}"
      run_once: true

    - name: Load existing static-nodes.json from one server
      ansible.builtin.slurp:
        src: "{{ blackfort_besu_config_dir }}/static-nodes.json"
      register: static_nodes_content
      delegate_to: "{{ ansible_play_hosts | first }}"
      run_once: true
      when: static_nodes_json.stat.exists

    - name: Use template static-nodes.json if missing
      ansible.builtin.set_fact:
        static_nodes: "{{ lookup('file', './files/static-nodes.json') | from_json }}"
      run_once: true
      when: not static_nodes_json.stat.exists

    - name: Load static-nodes.json from existing file
      ansible.builtin.set_fact:
        static_nodes: "{{ static_nodes_content.content | b64decode | from_json }}"
      run_once: true
      when: static_nodes_json.stat.exists
  when: blackfort_besu_add_new_node == "false"

- name: Add missing enodes to static-nodes.json
  ansible.builtin.set_fact:
    updated_static_nodes: "{{ (static_nodes + enode_uris_collected) | unique }}"
  run_once: true
  when: blackfort_besu_add_new_node == "false"

- name: Save updated static-nodes.json to all servers
  ansible.builtin.copy:
    content: "{{ updated_static_nodes | to_nice_json }}"
    dest: "{{ blackfort_besu_config_dir }}/static-nodes.json"
    mode: '0644'
  delegate_to: "{{ item }}"
  loop: "{{ ansible_play_hosts }}"
  run_once: true
  notify: Restart Docker Compose
  when: blackfort_besu_add_new_node == "false"

- name: Copy static-nodes.json to new server
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/docker/static-nodes-{{ blackfort_besu_network }}.json"
    dest: "{{ blackfort_besu_config_dir }}/static-nodes.json"
    owner: root
    group: root
    mode: '0644'
  notify: Restart Docker Compose
  when: blackfort_besu_add_new_node == "true"

- name: Show final static-nodes.json content
  ansible.builtin.debug:
    var: updated_static_nodes
  run_once: true
  when: blackfort_besu_add_new_node == "false"

- name: Copy Docker Compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ blackfort_besu_base_dir }}/docker-compose.yml"
    owner: root
    group: root
    mode: '0644'
  notify: Restart Docker Compose

# - name: Start Nodes
#   community.docker.docker_compose_v2:
#     project_src: "{{ blackfort_besu_base_dir }}"
#     files:
#       - docker-compose.yml
